using AutoMapper;
using FluentValidation;
using FluentValidation.AspNetCore;
using FurnitureAPI.Authentication;
using FurnitureAPI.Data;
using FurnitureAPI.Dtos;
using FurnitureAPI.Helpers;
using FurnitureAPI.Middlewares;
using FurnitureAPI.Models;
using FurnitureAPI.Seeders;
using FurnitureAPI.Services;
using FurnitureAPI.Services.Interfaces;
using FurnitureAPI.Swashbuckle;
using FurnitureAPI.Validators;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Serialization;
using NodaTime;
using System.Reflection;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var authenticationSettings = new AuthenticationSettings();
builder.Configuration.GetSection("Authentication").Bind(authenticationSettings);

builder.Services.AddControllers();
builder.Services.AddSingleton(authenticationSettings);
builder.Services.AddAuthentication(options =>
{
  options.DefaultAuthenticateScheme = "Bearer";
  options.DefaultScheme = "Bearer";
  options.DefaultChallengeScheme = "Bearer";
}).AddJwtBearer(cfg =>
{
  cfg.RequireHttpsMetadata = false;
  cfg.SaveToken = true;
  cfg.TokenValidationParameters = new TokenValidationParameters
  {
    ValidIssuer = authenticationSettings.JwtIssuer,
    ValidAudience = authenticationSettings.JwtIssuer,
    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(authenticationSettings.JwtKey)),
  };
});

builder.Services.AddAuthorization(options =>
{
  options.AddPolicy("HasNationality", builder => builder.RequireClaim("Nationality"));
  options.AddPolicy("HasDateOfBirth", builder => builder.RequireClaim("DateOfBirth"));
  options.AddPolicy("AtLeast18", builder => builder.AddRequirements(new MinimumAgeRequirement(18)));
});

builder.Services.AddScoped<IAuthorizationHandler, MinimumAgeRequirementHandler>();
//builder.Services.AddScoped<IAuthorizationHandler, SportClubResourceOperationRequirementHandler>();
//builder.Services.AddScoped<IUserContextService, UserContextService>();
builder.Services.AddHttpContextAccessor();
builder.Services.AddControllersWithViews()
  .AddNewtonsoftJson(options =>
  options.SerializerSettings.ReferenceLoopHandling = Newtonsoft
  .Json.ReferenceLoopHandling.Ignore).AddNewtonsoftJson(options => options
  .SerializerSettings.ContractResolver = new DefaultContractResolver());

builder.Services.AddControllers()
  .AddFluentValidation(fv =>
  {
    fv.RegisterValidatorsFromAssembly(Assembly.GetExecutingAssembly());
                //fv.RunDefaultMvcValidationAfterFluentValidationExecutes = false;
                fv.DisableDataAnnotationsValidation = true;
  });

builder.Services.AddLogging();
builder.Services.AddSwaggerGen(options =>
{
  options.AddSecurityDefinition("Token", new OpenApiSecurityScheme
  {
    Name = "Authorization",
    Type = SecuritySchemeType.ApiKey,
    Scheme = "basic",
    In = ParameterLocation.Header,
    Description = "Authorize using a Guid token generated by me.<br /><br />Usage: <b>Token [token]</b><br />Example: Token 1ca77ad5-9042-4263-82d9-b2ca0bea6d1c"
  });
  options.SwaggerDoc("v1", new OpenApiInfo
  {
    Version = "v1",
    Title = "Sport API",
    Description = "An API for managing and doing CRUD operations for Sport API"
  });
  var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
  var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

  options.IncludeXmlComments(xmlPath);
  options.SchemaFilter<EnumTypesSchemaFilter>(xmlPath);
  options.OperationFilter<SecurityRequirementsOperationFilter>();
});

//Enable CORS
builder.Services.AddCors(options =>
{
  var frontendURL = $"http://localhost:3000";
  options.AddPolicy("frontendConnection", builder =>
  {
    builder.AllowAnyMethod().AllowAnyHeader().AllowCredentials().WithOrigins(frontendURL);
    //.WithExposedHeaders(new string[] { "totalAmountOfRecords" });
  });
});

builder.Services.AddSingleton<IClock, SystemClock>(x => SystemClock.Instance);
builder.Services.AddSportDbContext(builder.Configuration.GetConnectionString("Database"));
builder.Services.AddDbContext<FurnitureDbContext>
   (options => options.UseSqlServer(builder.Configuration.GetConnectionString("Database")));
builder.Services.AddMediatR(typeof(Program));
builder.Services.AddAutoMapper(typeof(Program));
builder.Services.AddScoped<FurnitureSeeder>();
// Auto Mapper Configurations
var mapperConfig = new MapperConfiguration(mc =>
{
  mc.AddProfile(new MappingProfile());
});
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IRoleService, RoleService>();
//DODAJ NASTEPNE SERWISY
builder.Services.AddScoped<IValidator<RegisterDto>, RegisterUserDtoValidator>();
builder.Services.AddScoped<IValidator<FurnitureQuery>, FurnitureQueryValidator>();
builder.Services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();
builder.Services.AddScoped<ErrorHandlingMiddleware>();
builder.Services.AddScoped<RequestTimeMiddleware>();
builder.Services.AddScoped<RequestResponseLoggingMiddleware>();

builder.Services.AddEndpointsApiExplorer();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
  app.UseSwagger();
  app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
